int f(vector<int> v){
    int n = v.size();
    vector<int> t = v;
    sv(v);
    int i = 0;
    int ans = 0;
    multiset<int> a, b;
    while(i < n){
        if(v[i] == t[i]){
            i++;
            continue;
        }
        int j = i;
        while(i < n && (v[i] != t[i] || !a.empty())){
            if(b.find(t[i]) != b.end()){
                b.erase(b.find(t[i]));
            }else{
                a.insert(t[i]);
            }
            if(a.find(v[i]) != a.end()){
                a.erase(a.find(v[i]));
            }else{
                b.insert(v[i]);
            }
            if(a.empty() && b.empty()) {
                i++;
                break;
            }
            i++;
        }
        // if(i != n) index2(v[i], t[i]);
        ans += ((i - 1) - j);
    }
    // tv(v);
    // tv(t);
    // cout << ans << endl;
    return ans;
}
void solve(int test){
    int n;
    cin >> n;
    vector<int> v(n);
    cin >> v;
    // f(v);
    // return;
    ll ans = 0;
    rep(0, n){
        vector<int> newv;
        repj(i, n){
            newv.push_back(v[j]);
            // tv(newv);
            ans += f(newv);
        }
    }
    cout << ans << endl;
}